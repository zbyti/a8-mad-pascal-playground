mads 2.1.1
   204 					opt l+
   106
   107 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   107 				ZPAGE: $0080..$00D7
   108
   109 				.print 'RTLIB: ',RTLIB,'..',*-1
   109 				RTLIB: $201A..$2061
   110
   111 				; ------------------------------------------------------------
   112
   113 2062			START
   114 2062 BA				tsx
   115 2063 8E FF 21			stx MAIN.@halt+1
   116
   117 					.ifdef fmulinit
   118 					fmulinit
   119 					eif
   120
   121 = 0005			VLEN	= VARDATASIZE-VARINITSIZE
   122 = 221C			VADR	= DATAORIGIN+VARINITSIZE
   123
   124 					ift VADR > $BFFF
   125 					ert 'Invalid memory address range ',VADR
   126 					eli (VLEN>0) && (VLEN<=256)
   127 2066 A2 FB			ldx #256-VLEN
   128 2068 A9 00			lda #$00
   129 206A 9D 21 21 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   130 					eli VLEN>0
   131 					@fill #VADR #VLEN #$00
   132 					eif
   133
   134 2070 A9 21 85 82 A9 22 + 	mwa #PROGRAMSTACK psptr
   135
   136 					.ifdef MAIN.@DEFINES.ROMOFF
   137 					icl 'atari\romoff.asm'
   138 					.endif
   139
   140 2078 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   141 207A BD 40 03 9D 04 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   142
   143 2083 E8				inx						; X = 0
   144 2084 86 90			stx bp						; BP = 0
   145
   146 2086 8E 08 D2			stx audctl					; reset POKEY
   147 2089 A9 03			lda #3
   148 208B 8D 0F D2			sta skctl
   149
   150 208E CA				dex						; X = 255
   151
   152 208F				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: fire.a65]
   153
   154 208F			.local	MAIN						; PROCEDURE
   155
   156 208F 4C C6 20			jmp l_0007
   157
   158 				; ------------------------------------------------------------
   159
   160 2092			.local	SYSTEM						; UNIT
   161
   162 2092			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   163
   164 				; ------------------------------------------------------------
   165
   166 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   167 				; as Pointer
   168 2092 B5 98 85 8C			mva :STACKORIGIN,x VALUE
   169 2096 CA				dex
   170
   171 				; ------------------------------------------------------------
   172
   173 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   174 				; as Pointer
   175 2097 B5 98 85 88			mva :STACKORIGIN,x A
   176 209B B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   177 209F CA				dex
   178
   179 				; ---------------------  ASM Block 021  ---------------------
   180
   181 20A0 A0 00			ldy #0
   182 20A2 A5 8C 91 88			mva value (edx),y
   183
   184
   185 				; ------------------------------------------------------------
   186
   187 = 0088			A	= edx
   188 = 008C			VALUE	= ecx
   189 20A6			@exit
   190 					.ifdef @new
   191 					lda <@VarData
   192 					sta :ztmp
   193 					lda >@VarData
   194 					ldy #@VarDataSize-1
   195 					jmp @FreeMem
   196 					els
   197 20A6 60				rts						; ret
   198 					eif
   199 				.endl
   200
   201 20A7			.local	FILLCHAR_0049					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   202
   203 				; ------------------------------------------------------------
   204
   205 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   206 				; as Pointer
   207 20A7 B5 98 85 84			mva :STACKORIGIN,x VALUE
   208 20AB CA				dex
   209
   210 				; ------------------------------------------------------------
   211
   212 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   213 				; as Pointer
   214 20AC B5 98 85 8C			mva :STACKORIGIN,x COUNT
   215 20B0 B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   216 20B4 CA				dex
   217
   218 				; ------------------------------------------------------------
   219
   220 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   221 				; as Pointer
   222 20B5 B5 98 85 88			mva :STACKORIGIN,x A
   223 20B9 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   224 20BD CA				dex
   225
   226 				; ---------------------  ASM Block 024  ---------------------
   227
   228 20BE 20 1A 20			jsr @fill
   229
   230
   231 				; ------------------------------------------------------------
   232
   233 = 0088			A	= edx
   234 = 008C			COUNT	= ecx
   235 = 0084			VALUE	= eax
   236 20C1			@exit
   237 					.ifdef @new
   238 					lda <@VarData
   239 					sta :ztmp
   240 					lda >@VarData
   241 					ldy #@VarDataSize-1
   242 					jmp @FreeMem
   243 					els
   244 20C1 60				rts						; ret
   245 					eif
   246 				.endl
   247
   248 				; ------------------------------------------------------------
   249
   250 = 0101			__PORTB_BANKS	= $0101
   251 = 0648			M_PI_2	= $0648
   252 = 0192			D_PI_2	= $0192
   253 = 0004			D_PI_180	= $04
   254 = 0000			MGTIA	= $00
   255 = 0080			MVBXE	= $80
   256 = 0000			VBXE_XDLADR	= $00
   257 = 0100			VBXE_BCBADR	= $0100
   258 = 1000			VBXE_MAPADR	= $1000
   259 = 5000			VBXE_OVRADR	= $5000
   260 = B000			VBXE_WINDOW	= $B000
   261 = 0000			IDLI	= $00
   262 = 0001			IVBL	= $01
   263 = 00FE			CH_DELCHR	= $FE
   264 = 009B			CH_ENTER	= $9B
   265 = 001B			CH_ESC	= $1B
   266 = 001C			CH_CURS_UP	= $1C
   267 = 001D			CH_CURS_DOWN	= $1D
   268 = 001E			CH_CURS_LEFT	= $1E
   269 = 001F			CH_CURS_RIGHT	= $1F
   270 = 007F			CH_TAB	= $7F
   271 = 009B			CH_EOL	= $9B
   272 = 007D			CH_CLR	= $7D
   273 = 00FD			CH_BELL	= $FD
   274 = 007E			CH_DEL	= $7E
   275 = 009C			CH_DELLINE	= $9C
   276 = 009D			CH_INSLINE	= $9D
   277 = 0000			COLOR_BLACK	= $00
   278 = 000E			COLOR_WHITE	= $0E
   279 = 0032			COLOR_RED	= $32
   280 = 0096			COLOR_CYAN	= $96
   281 = 0068			COLOR_VIOLET	= $68
   282 = 00C4			COLOR_GREEN	= $C4
   283 = 0074			COLOR_BLUE	= $74
   284 = 00EE			COLOR_YELLOW	= $EE
   285 = 0028			COLOR_ORANGE	= $28
   286 = 00E4			COLOR_BROWN	= $E4
   287 = 003C			COLOR_LIGHTRED	= $3C
   288 = 0004			COLOR_GRAY1	= $04
   289 = 0006			COLOR_GRAY2	= $06
   290 = 000A			COLOR_GRAY3	= $0A
   291 = 00CC			COLOR_LIGHTGREEN	= $CC
   292 = 007C			COLOR_LIGHTBLUE	= $7C
   293 = 0004			FMOPENREAD	= $04
   294 = 0008			FMOPENWRITE	= $08
   295 = 0009			FMOPENAPPEND	= $09
   296 = 000C			FMOPENREADWRITE	= $0C
   297 = 2216			SCREENWIDTH	= DATAORIGIN+$0000
   298 = 2218			SCREENHEIGHT	= DATAORIGIN+$0002
   299 = 221A			DATESEPARATOR	= DATAORIGIN+$0004
   300 = D014			TVSYSTEM	= $D014
   301 = D20A			RND	= $D20A
   302 = 02C0			adr.PALETTE	= $02C0
   303 20C2			.var PALETTE	= adr.PALETTE .word
   304 = D012			adr.HPALETTE	= $D012
   305 20C2			.var HPALETTE	= adr.HPALETTE .word
   306 = 221B			FILEMODE	= DATAORIGIN+$0005
   307 = 221C			GRAPHMODE	= DATAORIGIN+$0006
   308 = 221D			IORESULT	= DATAORIGIN+$0007
   309 = 221E			EOLN	= DATAORIGIN+$0008
   310 = 221F			RNDSEED	= DATAORIGIN+$0009
   311
   312 = 20C2 C0 02		PALETTE
   312 = 20C4 12 D0		HPALETTE
   312 				.endl							; UNIT SYSTEM
   313
   314 				; ------------------------------------------------------------
   315
   316 20C6			.local	ATARI						; UNIT
   317
   318 				; ------------------------------------------------------------
   319
   320 = 0012			RTCLOK	= $12
   321 = 004D			ATRACT	= $4D
   322 = 0052			LMARGIN	= $52
   323 = 0053			RMARGIN	= $53
   324 = 0054			ROWCRS	= $54
   325 = 0055			COLCRS	= $55
   326 = 0057			DINDEX	= $57
   327 = 0058			SAVMSC	= $58
   328 = 0062			PALNTS	= $62
   329 = 006A			RAMTOP	= $6A
   330 = 0200			VDSLST	= $0200
   331 = 0230			SDLSTL	= $0230
   332 = 0290			TXTROW	= $0290
   333 = 0291			TXTCOL	= $0291
   334 = 0293			TINDEX	= $0293
   335 = 0294			TXTMSC	= $0294
   336 = 022F			SDMCTL	= $022F
   337 = 026F			GPRIOR	= $026F
   338 = 02F0			CRSINH	= $02F0
   339 = 02F3			CHACT	= $02F3
   340 = 02F4			CHBAS	= $02F4
   341 = 02FC			CH	= $02FC
   342 = 02C0			PCOLR0	= $02C0
   343 = 02C1			PCOLR1	= $02C1
   344 = 02C2			PCOLR2	= $02C2
   345 = 02C3			PCOLR3	= $02C3
   346 = 02C4			COLOR0	= $02C4
   347 = 02C5			COLOR1	= $02C5
   348 = 02C6			COLOR2	= $02C6
   349 = 02C7			COLOR3	= $02C7
   350 = 02C8			COLOR4	= $02C8
   351 = 02C8			COLBAKS	= $02C8
   352 = D000			HPOSP0	= $D000
   353 = D001			HPOSP1	= $D001
   354 = D002			HPOSP2	= $D002
   355 = D003			HPOSP3	= $D003
   356 = D004			HPOSM0	= $D004
   357 = D005			HPOSM1	= $D005
   358 = D006			HPOSM2	= $D006
   359 = D007			HPOSM3	= $D007
   360 = D008			SIZEP0	= $D008
   361 = D009			SIZEP1	= $D009
   362 = D00A			SIZEP2	= $D00A
   363 = D00B			SIZEP3	= $D00B
   364 = D00C			SIZEM	= $D00C
   365 = D00D			GRAFP0	= $D00D
   366 = D00E			GRAFP1	= $D00E
   367 = D00F			GRAFP2	= $D00F
   368 = D010			GRAFP3	= $D010
   369 = D011			GRAFM	= $D011
   370 = D004			P0PF	= $D004
   371 = D014			PAL	= $D014
   372 = D012			COLPM0	= $D012
   373 = D013			COLPM1	= $D013
   374 = D014			COLPM2	= $D014
   375 = D015			COLPM3	= $D015
   376 = D016			COLPF0	= $D016
   377 = D017			COLPF1	= $D017
   378 = D018			COLPF2	= $D018
   379 = D019			COLPF3	= $D019
   380 = D01A			COLBK	= $D01A
   381 = D01B			PRIOR	= $D01B
   382 = D01D			GRACTL	= $D01D
   383 = D01E			HITCLR	= $D01E
   384 = D200			AUDF1	= $D200
   385 = D201			AUDC1	= $D201
   386 = D202			AUDF2	= $D202
   387 = D203			AUDC2	= $D203
   388 = D204			AUDF3	= $D204
   389 = D205			AUDC3	= $D205
   390 = D206			AUDF4	= $D206
   391 = D207			AUDC4	= $D207
   392 = D208			AUDCTL	= $D208
   393 = D20F			SKSTAT	= $D20F
   394 = D300			PORTA	= $D300
   395 = D301			PORTB	= $D301
   396 = D400			DMACTL	= $D400
   397 = D401			CHACTL	= $D401
   398 = D402			DLISTL	= $D402
   399 = D404			HSCROL	= $D404
   400 = D405			VSCROL	= $D405
   401 = D407			PMBASE	= $D407
   402 = D409			CHBASE	= $D409
   403 = D40A			WSYNC	= $D40A
   404 = D40B			VCOUNT	= $D40B
   405 = D40C			PENH	= $D40C
   406 = D40D			PENV	= $D40D
   407 = D40E			NMIEN	= $D40E
   408
   409 				.endl							; UNIT ATARI
   410 20C6			l_0007
   411
   412 				; optimize OK (fire.pas), line = 28
   413
   414 20C6 A9 20 8D C8 02		mva #$20 ATARI.COLOR4
   415 20CB A9 00 85 E2			mva #$00 TMP
   416
   417 				; optimize OK (fire.pas), line = 29
   418
   419 20CF 8D 30 02			sta ATARI.SDLSTL
   420 20D2 A9 20 8D 31 02		mva #$20 ATARI.SDLSTL+1
   421 20D7 A9 60 8D F4 02		mva #$60 ATARI.CHBAS
   422
   423 				; optimize OK (fire.pas), line = 30
   424
   425 20DC A9 40 8D 6F 02		mva #$40 ATARI.GPRIOR
   426 20E1 A9 21 8D 2F 02		mva #$21 ATARI.SDMCTL
   427
   428 				; optimize OK (fire.pas), line = 32
   429
   430 20E6 A9 00 85 E0			mva #$00 B0I
   431
   432 20EA			l_0088
   433 				; --- ForToDoCondition
   434 20EA A5 E0			lda B0I
   435 20EC C9 10			cmp #$10
   436 20EE B0 36			jcs l_0096
   437
   438 				; optimize OK (fire.pas), line = 33
   439
   440 20F0 A9 00 85 E1			mva #$00 B1I
   441
   442 20F4			l_009F
   443 				; --- ForToDoCondition
   444 20F4 A5 E1			lda B1I
   445 20F6 C9 08			cmp #$08
   446 20F8 B0 21			jcs l_00AD
   447 20FA A9 00			lda #$00
   448 20FC 85 B2			sta :STACKORIGIN+STACKWIDTH+10
   449 20FE A5 E0			lda B0I
   450 2100 0A				asl @
   451 2101 26 B2			rol :STACKORIGIN+STACKWIDTH+10
   452 2103 0A				asl @
   453 2104 26 B2			rol :STACKORIGIN+STACKWIDTH+10
   454 2106 0A				asl @
   455 2107 26 B2			rol :STACKORIGIN+STACKWIDTH+10
   456 2109 18 65 E1			add B1I
   457 210C A8				tay
   458 210D A9 60			lda #$60
   459 210F 65 B2			adc :STACKORIGIN+STACKWIDTH+10
   460 2111 85 91			sta :bp+1
   461 2113 A5 E2			lda TMP
   462 2115 91 90			sta (:bp),y
   463
   464 				; --- ForToDoEpilog
   465 2117 E6 E1			inc B1I
   466 2119 D0 D9			jne l_009F
   467 211B			l_00AD
   468
   469 				; optimize OK (fire.pas), line = 34
   470
   471 211B A5 E2			lda TMP
   472 211D 18 69 11			add #$11
   473 2120 85 E2			sta TMP
   474
   475 				; --- ForToDoEpilog
   476 2122 E6 E0			inc B0I
   477 2124 D0 C4			jne l_0088
   478 2126			l_0096
   479
   480 				; optimize OK (fire.pas), line = 37
   481
   482 2126				.LOCAL
   483 2126 A0 00			ldy #$00
   484 2128 98				tya
   485 2129 99 00 64 99 80 64 + fill	:8 sta $6400+#*$80,y
   486 2141 C8				iny
   487 2142 10 E5			bpl fill
   488 					.ENDL
   489
   490 				; --- WhileProlog
   491 2144 4C FB 21			jmp l_00D3
   492 2147			l_00D4
   493
   494 				; optimize OK (fire.pas), line = 40
   495
   496 2147 A9 E1 85 E3			mva #$E1 P0
   497 214B A9 63 85 E4			mva #$63 P0+1
   498
   499 				; optimize OK (fire.pas), line = 41
   500
   501 214F A9 E1 85 E5			mva #$E1 P1
   502 2153 A9 64 85 E6			mva #$64 P1+1
   503
   504 				; optimize OK (fire.pas), line = 42
   505
   506 2157 A9 E1 85 E7			mva #$E1 P2
   507 215B A9 65 85 E8			mva #$65 P2+1
   508
   509 				; optimize OK (fire.pas), line = 44
   510
   511 215F A9 00 85 E0			mva #$00 B0I
   512
   513 2163			l_00E9
   514 				; --- ForToDoCondition
   515
   516 				; optimize OK (fire.pas), line = 45
   517
   518 2163 A0 1E			ldy #$1E
   519 2165 B1 E3			lda (P0),y
   520 2167 85 A1			sta :STACKORIGIN+9
   521 2169 C8				iny
   522 216A A5 A1			lda :STACKORIGIN+9
   523 216C 18 71 E3			add (P0),y
   524 216F C8				iny
   525 2170 18 71 E3			add (P0),y
   526 2173 85 A1			sta :STACKORIGIN+9
   527 2175 A0 3F			ldy #$3F
   528 2177 A5 A1			lda :STACKORIGIN+9
   529 2179 18 71 E3			add (P0),y
   530 217C 85 E2			sta TMP
   531
   532 				; optimize OK (fire.pas), line = 46
   533
   534 217E 4A				lsr @
   535 217F 4A				lsr @
   536 2180 85 E2			sta TMP
   537
   538 				; optimize OK (fire.pas), line = 47
   539
   540 2182 A0 00			ldy #$00
   541 2184 91 E3			sta (P0),y
   542
   543 				; optimize OK (fire.pas), line = 49
   544
   545 2186 A0 1E			ldy #$1E
   546 2188 B1 E5			lda (P1),y
   547 218A 85 A1			sta :STACKORIGIN+9
   548 218C C8				iny
   549 218D A5 A1			lda :STACKORIGIN+9
   550 218F 18 71 E5			add (P1),y
   551 2192 C8				iny
   552 2193 18 71 E5			add (P1),y
   553 2196 85 A1			sta :STACKORIGIN+9
   554 2198 A0 3F			ldy #$3F
   555 219A A5 A1			lda :STACKORIGIN+9
   556 219C 18 71 E5			add (P1),y
   557 219F 85 E2			sta TMP
   558
   559 				; optimize OK (fire.pas), line = 50
   560
   561 21A1 4A				lsr @
   562 21A2 4A				lsr @
   563 21A3 85 E2			sta TMP
   564
   565 				; optimize OK (fire.pas), line = 51
   566
   567 21A5 A0 00			ldy #$00
   568 21A7 91 E5			sta (P1),y
   569
   570 				; optimize OK (fire.pas), line = 53
   571
   572 21A9 A0 1E			ldy #$1E
   573 21AB B1 E7			lda (P2),y
   574 21AD 85 A1			sta :STACKORIGIN+9
   575 21AF C8				iny
   576 21B0 A5 A1			lda :STACKORIGIN+9
   577 21B2 18 71 E7			add (P2),y
   578 21B5 C8				iny
   579 21B6 18 71 E7			add (P2),y
   580 21B9 85 A1			sta :STACKORIGIN+9
   581 21BB A0 3F			ldy #$3F
   582 21BD A5 A1			lda :STACKORIGIN+9
   583 21BF 18 71 E7			add (P2),y
   584 21C2 85 E2			sta TMP
   585
   586 				; optimize OK (fire.pas), line = 54
   587
   588 21C4 4A				lsr @
   589 21C5 4A				lsr @
   590 21C6 85 E2			sta TMP
   591
   592 				; optimize OK (fire.pas), line = 55
   593
   594 21C8 A0 00			ldy #$00
   595 21CA 91 E7			sta (P2),y
   596
   597 				; optimize FAIL (0, fire.pas), line = 57
   598
   599 21CC E6 E3			inc P0
   600 21CE D0 02			sne
   601 21D0 E6 E4			inc P0+1
   602 21D2 E6 E5			inc P1
   603 21D4 D0 02			sne
   604 21D6 E6 E6			inc P1+1
   605 21D8 E6 E7			inc P2
   606 21DA D0 02			sne
   607 21DC E6 E8			inc P2+1
   608
   609 				; --- ForToDoEpilog
   610 21DE E6 E0			inc B0I
   611 21E0 D0 81			jne l_00E9
   612 21E2			l_00F7
   613
   614 				; optimize OK (fire.pas), line = 61
   615
   616 21E2 A9 E0 85 E3			mva #$E0 P0
   617 21E6 A9 66 85 E4			mva #$66 P0+1
   618
   619 				; optimize OK (fire.pas), line = 62
   620
   621 21EA A9 1F 85 E0			mva #$1F B0I
   622
   623 21EE			l_0199
   624 				; --- ForToDoCondition
   625 21EE AD 0A D2			lda SYSTEM.RND
   626 21F1 29 0F			and #$0F
   627 21F3 A4 E0			ldy B0I
   628 21F5 91 E3			sta (P0),y
   629
   630 				; --- ForToDoEpilog
   631 21F7 C6 E0			dec B0I
   632 21F9 10 F3			jpl l_0199
   633 21FB			l_01A7
   634 21FB			l_00D3
   635
   636 				; optimize OK (fire.pas), line = 39
   637
   638 21FB 4C 47 21			jmp l_00D4
   639
   640 				; ------------------------------------------------------------
   641
   642 = 6400			SCREEN	= $6400
   643 = 6000			CHARSET	= $6000
   644 = 2000			adr.DL	= CODEORIGIN+$0000
   645 21FE			.var DL	= adr.DL .word
   646 = 00E0			B0I	= $E0
   647 = 00E1			B1I	= $E1
   648 = 00E2			TMP	= $E2
   649 = 00E3			P0	= $E3
   650 = 00E5			P1	= $E5
   651 = 00E7			P2	= $E7
   652 = 000F			@FORTMP_0085	= $0F
   653 = 0007			@FORTMP_009C	= $07
   654 = 00FF			@FORTMP_00E6	= $FF
   655 = 0000			@FORTMP_0196	= $00
   656 21FE			@exit
   657
   658 21FE A2 00		@halt	ldx #$00
   659 2200 9A				txs
   660 					.ifdef MAIN.@DEFINES.ROMOFF
   661 					inc portb
   662 					.endif
   663
   664 2201 A0 01			ldy #$01
   665
   666 2203 60				rts
   667
   668 				; ------------------------------------------------------------
   669
   670 2204 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   671
   672 				; ------------------------------------------------------------
   673
   674 2214			.local	@DEFINES
   675 2214			ATARI
   676 				.endl
   677
   678 2214			.local	@RESOURCE
   679 				.endl
   680
   681 = 2214 00 20		DL
   681 				.endl							; MAIN
   682
   683 				; ------------------------------------------------------------
   684 				; ------------------------------------------------------------
   685
   686 				.macro	UNITINITIALIZATION
   687 				
   688 					.ifdef MAIN.SYSTEM.@UnitInit
   689 					jsr MAIN.SYSTEM.@UnitInit
   690 					eif
   691 				
   692 					.ifdef MAIN.ATARI.@UnitInit
   693 					jsr MAIN.ATARI.@UnitInit
   694 					eif
   695 				.endm
   696
   697 				; ------------------------------------------------------------
   698
   699 					ift .SIZEOF(MAIN.SYSTEM) > 0
   700 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   700 				SYSTEM: $2092..$20C5
   701 					eif
   702
   703 					ift .SIZEOF(MAIN.ATARI) > 0
   704 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   705 					eif
   706
   707 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   707 				CODE: $2000..$2213
   708
   709 				; ------------------------------------------------------------
   710
   711 2216			DATAORIGIN
   712 2216 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   713
   714 = 0006			VARINITSIZE	= *-DATAORIGIN
   715 = 000B			VARDATASIZE	= 11
   716
   717 = 2221			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   718
   719 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   719 				DATA: $2216..$2221
   720
   721 02E0-02E1> 62 20			run START
   722
   723 				; ------------------------------------------------------------
   724
   725 				.macro	STATICDATA
   726 				.by  $42 $00 $64 $02 $02 $02 $02 $02  $02 $02 $02 $02 $02 $02 $02 $02  $02 $02 $02 $02 $02 $02 $02 $41
   727 				.by  $00 $20
   728 				.endm
   729
   730 					end
