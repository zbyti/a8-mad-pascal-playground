mads 2.1.0
   260 					opt l+
   100
   101 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   101 				ZPAGE: $0080..$00D7
   102
   103 				.print 'RTLIB: ',RTLIB,'..',*-1
   103 				RTLIB: $20F7..$219D
   104
   105 				; ------------------------------------------------------------
   106
   107 219E			START
   108 219E BA				tsx
   109 219F 8E ED 24			stx MAIN.@halt+1
   110
   111 					.ifdef fmulinit
   112 					fmulinit
   113 					eif
   114
   115 = 0006			VLEN	= VARDATASIZE-VARINITSIZE
   116 = 2C31			VADR	= DATAORIGIN+VARINITSIZE
   117
   118 					ift VADR > $BFFF
   119 					ert 'Invalid memory address range ',VADR
   120 					eli (VLEN>0) && (VLEN<=256)
   121 21A2 A2 FA			ldx #256-VLEN
   122 21A4 A9 00			lda #0
   123 21A6 9D 37 2B E8 D0 FA		sta:rne VADR+VLEN-256,x+
   124 					eli VLEN>0
   125 					@fill #VADR #VLEN #0
   126 					eif
   127
   128 21AC A9 37 85 82 A9 2C + 	mwa #PROGRAMSTACK psptr
   129
   130 					.ifdef MAIN.@DEFINES.ROMOFF
   131 					icl 'atari\romoff.asm'
   132 					.endif
   133
   134 21B4 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   135 21B6 BD 40 03 9D F0 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   136
   137 21BF E8				inx						; X = 0
   138 21C0 86 90			stx bp						; BP = 0
   139
   140 21C2 8E 08 D2			stx audctl					; reset POKEY
   141 21C5 A9 03			lda #3
   142 21C7 8D 0F D2			sta skctl
   143
   144 21CA CA				dex						; X = 255
   145
   146 21CB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: depacker.a65]
   147
   148 21CB			.local	MAIN						; PROCEDURE
   149
   150 21CB 4C 5D 24			jmp l_00FE
   151
   152 				; ------------------------------------------------------------
   153
   154 21CE			.local	SYSTEM						; UNIT
   155
   156 				; ------------------------------------------------------------
   157
   158 = 0101			__PORTB_BANKS	= $0101
   159 = 0648			M_PI_2	= $0648
   160 = 0192			D_PI_2	= $0192
   161 = 0004			D_PI_180	= $04
   162 = 0000			MGTIA	= $00
   163 = 0080			MVBXE	= $80
   164 = 0000			VBXE_XDLADR	= $00
   165 = 0100			VBXE_BCBADR	= $0100
   166 = 1000			VBXE_MAPADR	= $1000
   167 = 5000			VBXE_OVRADR	= $5000
   168 = B000			VBXE_WINDOW	= $B000
   169 = 0000			IDLI	= $00
   170 = 0001			IVBL	= $01
   171 = 00FE			CH_DELCHR	= $FE
   172 = 009B			CH_ENTER	= $9B
   173 = 001B			CH_ESC	= $1B
   174 = 001C			CH_CURS_UP	= $1C
   175 = 001D			CH_CURS_DOWN	= $1D
   176 = 001E			CH_CURS_LEFT	= $1E
   177 = 001F			CH_CURS_RIGHT	= $1F
   178 = 007F			CH_TAB	= $7F
   179 = 009B			CH_EOL	= $9B
   180 = 007D			CH_CLR	= $7D
   181 = 00FD			CH_BELL	= $FD
   182 = 007E			CH_DEL	= $7E
   183 = 009C			CH_DELLINE	= $9C
   184 = 009D			CH_INSLINE	= $9D
   185 = 0000			COLOR_BLACK	= $00
   186 = 000E			COLOR_WHITE	= $0E
   187 = 0032			COLOR_RED	= $32
   188 = 0096			COLOR_CYAN	= $96
   189 = 0068			COLOR_VIOLET	= $68
   190 = 00C4			COLOR_GREEN	= $C4
   191 = 0074			COLOR_BLUE	= $74
   192 = 00EE			COLOR_YELLOW	= $EE
   193 = 0028			COLOR_ORANGE	= $28
   194 = 00E4			COLOR_BROWN	= $E4
   195 = 003C			COLOR_LIGHTRED	= $3C
   196 = 0004			COLOR_GRAY1	= $04
   197 = 0006			COLOR_GRAY2	= $06
   198 = 000A			COLOR_GRAY3	= $0A
   199 = 00CC			COLOR_LIGHTGREEN	= $CC
   200 = 007C			COLOR_LIGHTBLUE	= $7C
   201 = 0004			FMOPENREAD	= $04
   202 = 0008			FMOPENWRITE	= $08
   203 = 0009			FMOPENAPPEND	= $09
   204 = 000C			FMOPENREADWRITE	= $0C
   205 = 2500			SCREENWIDTH	= DATAORIGIN+$0000
   206 = 2502			SCREENHEIGHT	= DATAORIGIN+$0002
   207 = 2504			DATESEPARATOR	= DATAORIGIN+$0004
   208 = D014			TVSYSTEM	= $D014
   209 = 02C0			adr.PALETTE	= $02C0
   210 21CE			.var PALETTE	= adr.PALETTE .word
   211 = D012			adr.HPALETTE	= $D012
   212 21CE			.var HPALETTE	= adr.HPALETTE .word
   213 = 2505			FILEMODE	= DATAORIGIN+$0005
   214 = 2506			GRAPHMODE	= DATAORIGIN+$0006
   215 = 2507			IORESULT	= DATAORIGIN+$0007
   216 = 2508			EOLN	= DATAORIGIN+$0008
   217 = 2509			RNDSEED	= DATAORIGIN+$0009
   218
   219 = 21CE C0 02		PALETTE
   219 = 21D0 12 D0		HPALETTE
   219 				.endl							; UNIT SYSTEM
   220
   221 				; ------------------------------------------------------------
   222
   223 21D2			.local	ATARI						; UNIT
   224
   225 				; ------------------------------------------------------------
   226
   227 = 0012			RTCLOK	= $12
   228 = 004D			ATRACT	= $4D
   229 = 0052			LMARGIN	= $52
   230 = 0053			RMARGIN	= $53
   231 = 0054			ROWCRS	= $54
   232 = 0055			COLCRS	= $55
   233 = 0057			DINDEX	= $57
   234 = 0058			SAVMSC	= $58
   235 = 0062			PALNTS	= $62
   236 = 006A			RAMTOP	= $6A
   237 = 0200			VDSLST	= $0200
   238 = 0230			SDLSTL	= $0230
   239 = 0290			TXTROW	= $0290
   240 = 0291			TXTCOL	= $0291
   241 = 0293			TINDEX	= $0293
   242 = 0294			TXTMSC	= $0294
   243 = 022F			SDMCTL	= $022F
   244 = 026F			GPRIOR	= $026F
   245 = 02F0			CRSINH	= $02F0
   246 = 02F3			CHACT	= $02F3
   247 = 02F4			CHBAS	= $02F4
   248 = 02FC			CH	= $02FC
   249 = 02C0			PCOLR0	= $02C0
   250 = 02C1			PCOLR1	= $02C1
   251 = 02C2			PCOLR2	= $02C2
   252 = 02C3			PCOLR3	= $02C3
   253 = 02C4			COLOR0	= $02C4
   254 = 02C5			COLOR1	= $02C5
   255 = 02C6			COLOR2	= $02C6
   256 = 02C7			COLOR3	= $02C7
   257 = 02C8			COLOR4	= $02C8
   258 = 02C8			COLBAKS	= $02C8
   259 = D000			HPOSP0	= $D000
   260 = D001			HPOSP1	= $D001
   261 = D002			HPOSP2	= $D002
   262 = D003			HPOSP3	= $D003
   263 = D004			HPOSM0	= $D004
   264 = D005			HPOSM1	= $D005
   265 = D006			HPOSM2	= $D006
   266 = D007			HPOSM3	= $D007
   267 = D008			SIZEP0	= $D008
   268 = D009			SIZEP1	= $D009
   269 = D00A			SIZEP2	= $D00A
   270 = D00B			SIZEP3	= $D00B
   271 = D00C			SIZEM	= $D00C
   272 = D00D			GRAFP0	= $D00D
   273 = D00E			GRAFP1	= $D00E
   274 = D00F			GRAFP2	= $D00F
   275 = D010			GRAFP3	= $D010
   276 = D011			GRAFM	= $D011
   277 = D004			P0PF	= $D004
   278 = D014			PAL	= $D014
   279 = D012			COLPM0	= $D012
   280 = D013			COLPM1	= $D013
   281 = D014			COLPM2	= $D014
   282 = D015			COLPM3	= $D015
   283 = D016			COLPF0	= $D016
   284 = D017			COLPF1	= $D017
   285 = D018			COLPF2	= $D018
   286 = D019			COLPF3	= $D019
   287 = D01A			COLBK	= $D01A
   288 = D01B			PRIOR	= $D01B
   289 = D01D			GRACTL	= $D01D
   290 = D01E			HITCLR	= $D01E
   291 = D200			AUDF1	= $D200
   292 = D201			AUDC1	= $D201
   293 = D202			AUDF2	= $D202
   294 = D203			AUDC2	= $D203
   295 = D204			AUDF3	= $D204
   296 = D205			AUDC3	= $D205
   297 = D206			AUDF4	= $D206
   298 = D207			AUDC4	= $D207
   299 = D208			AUDCTL	= $D208
   300 = D20F			SKSTAT	= $D20F
   301 = D300			PORTA	= $D300
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 21D2			.local	CRT						; UNIT
   321
   322 21D2			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 21D2 8A 48			txa:pha
   327
   328 21D4 20 23 21			@GetKey
   329
   330 21D7 8D 0C 25			sta Result
   331
   332 21DA 68 AA			pla:tax
   333
   334 21DC			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 21DC E8				inx
   342 21DD AD 0C 25 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 250C			RESULT	= DATAORIGIN+$000C
   355
   356 = 250C			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 21E2 60				rts						; ret
   360 				.endl
   361
   362 21E3			.local	TEXTMODE					; PROCEDURE | ASSEMBLER
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368 21E3 B5 98 8D 0D 25		mva :STACKORIGIN,x MODE
   369 21E8 CA				dex
   370
   371 				; ---------------------  ASM Block 059  ---------------------
   372
   373 21E9 8A 48			txa:pha
   374
   375 21EB 20 F7 20			@clrscr
   376
   377 21EE 68 AA			pla:tax
   378
   379
   380 				; ------------------------------------------------------------
   381
   382 = 250D			MODE	= DATAORIGIN+$000D
   383
   384 = 250D			@VarData	= MODE
   385 = 0001			@VarDataSize	= 1
   386
   387 21F0			@exit
   388 					.ifdef @new
   389 					lda <@VarData
   390 					sta :ztmp
   391 					lda >@VarData
   392 					ldy #@VarDataSize-1
   393 					jmp @FreeMem
   394 					els
   395 21F0 60				rts						; ret
   396 					eif
   397 				.endl
   398
   399 				; ------------------------------------------------------------
   400
   401 = 250B			TEXTATTR	= DATAORIGIN+$000B
   402 = D01F			CONSOL	= $D01F
   403 = 0000			CN_START_SELECT_OPTION	= $00
   404 = 0001			CN_SELECT_OPTION	= $01
   405 = 0002			CN_START_OPTION	= $02
   406 = 0003			CN_OPTION	= $03
   407 = 0004			CN_START_SELECT	= $04
   408 = 0005			CN_SELECT	= $05
   409 = 0006			CN_START	= $06
   410 = 0007			CN_NONE	= $07
   411 = 0000			BW40	= $00
   412 = 0001			CO40	= $01
   413 = 0002			BW80	= $02
   414 = 0003			CO80	= $03
   415 = 0007			MONO	= $07
   416 = 0001			C40	= $01
   417 = 0003			C80	= $03
   418 = 0000			BLACK	= $00
   419 = 0001			BLUE	= $01
   420 = 0002			GREEN	= $02
   421 = 0003			CYAN	= $03
   422 = 0004			RED	= $04
   423 = 0005			MAGENTA	= $05
   424 = 0006			BROWN	= $06
   425 = 0007			LIGHTGRAY	= $07
   426 = 0008			DARKGRAY	= $08
   427 = 0009			LIGHTBLUE	= $09
   428 = 000A			LIGHTGREEN	= $0A
   429 = 000B			LIGHTCYAN	= $0B
   430 = 000C			LIGHTRED	= $0C
   431 = 000D			LIGHTMAGENTA	= $0D
   432 = 000E			YELLOW	= $0E
   433 = 000F			WHITE	= $0F
   434 = 0080			BLINK	= $80
   435
   436 				.endl							; UNIT CRT
   437
   438 				; ------------------------------------------------------------
   439
   440 21F1			.local	TYPES						; UNIT
   441
   442 				; ------------------------------------------------------------
   443
   444 				.endl							; UNIT TYPES
   445
   446 				; ------------------------------------------------------------
   447
   448 21F1			.local	FASTGRAPH					; UNIT
   449
   450 21F1			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   451
   452 				; ------------------------------------------------------------
   453
   454 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   455 				; as Pointer
   456 21F1 B5 98 8D 2A 2C		mva :STACKORIGIN,x COLOR
   457 21F6 CA				dex
   458
   459 				; ---------------------  ASM Block 061  ---------------------
   460
   461 21F7 8D 17 25			sta GetColor
   462
   463 21FA 4C 40 22			jmp gr8
   464 = 21FB			mode	equ *-2
   465
   466 21FD AD 2A 2C		gr15	lda color
   467 2200 29 03			and #3
   468 2202 A8				tay
   469
   470 2203 4C 46 22			jmp toend
   471
   472 2206 8A 48		gr9	txa:pha
   473
   474 2208 AD 2A 2C			lda color
   475 220B 29 0F			and #$0f
   476 220D 8D 39 22			sta c9+1
   477 2210 0A 0A 0A 0A			:4 asl @
   478 2214 8D 38 22			sta c9
   479
   480 2217 A0 00			ldy #0
   481 2219 98			lp	tya
   482 221A 29 01			and #1
   483 221C AA				tax
   484 221D BD 3A 22			lda c9_,x
   485 2220 99 24 25			sta adr.color_bits,y
   486 2223 BD 38 22			lda c9,x
   487 2226 99 24 26			sta adr.color_bits+$100,y
   488 2229 C8				iny
   489 222A D0 ED			bne lp
   490
   491 222C 68 AA			pla:tax
   492
   493 222E AC 2A 2C			ldy color
   494 2231 F0 13			beq toend
   495
   496 2233 A0 01			ldy #1
   497 2235 4C 46 22			jmp toend
   498
   499 2238 00 00		c9	dta 0,0
   500 223A 0F F0		c9_	dta $0f, $f0
   501
   502 223C 25 26 27 28		colorHi	dta h(adr.color_bits, adr.color_bits+$100, adr.color_bits+$200, adr.color_bits+$300)
   503
   504 2240 AD 2A 2C		gr8	lda color
   505 2243 29 01			and #1
   506 2245 A8				tay
   507
   508 2246			toend
   509 					.ifdef fLine
   510 					lda colorHi,y
   511 					sta fLine.urr_color+2
   512 					sta fLine.uur_color+2
   513 					sta fLine.drr_color+2
   514 					sta fLine.ddr_color+2
   515
   516 					lda #$1d		; ora *,x
   517 					cpy #0
   518 					sne
   519 					lda #$3d		; and *,x
   520
   521 					sta fLine.urr_color
   522 					sta fLine.uur_color
   523 					sta fLine.drr_color
   524 					sta fLine.ddr_color
   525 					.endif
   526
   527 					.ifdef PutPixel
   528 2246 B9 3C 22 8D C2 22		mva colorHi,y PutPixel.acol+2
   529
   530 224C A9 1D			lda #$1d		; ora *,x
   531 224E C0 00			cpy #0
   532 2250 D0 02			sne
   533 2252 A9 3D			lda #$3d		; and *,x
   534
   535 2254 8D C0 22			sta PutPixel.acol
   536 					.endif
   537
   538
   539 				; ------------------------------------------------------------
   540
   541 = 2C2A			COLOR	= DATAORIGIN+$072A
   542
   543 = 2C2A			@VarData	= COLOR
   544 = 0001			@VarDataSize	= 1
   545
   546 2257			@exit
   547 					.ifdef @new
   548 					lda <@VarData
   549 					sta :ztmp
   550 					lda >@VarData
   551 					ldy #@VarDataSize-1
   552 					jmp @FreeMem
   553 					els
   554 2257 60				rts						; ret
   555 					eif
   556 				.endl
   557
   558 2258			.local	PUTPIXEL					; PROCEDURE | ASSEMBLER | REGISTER
   559
   560 				; ------------------------------------------------------------
   561
   562 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   563 				; as Pointer
   564 2258 B5 98 85 8C			mva :STACKORIGIN,x Y
   565 225C B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x Y+1
   566 2260 CA				dex
   567
   568 				; ------------------------------------------------------------
   569
   570 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   571 				; as Pointer
   572 2261 B5 98 85 88			mva :STACKORIGIN,x X
   573 2265 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x X+1
   574 2269 CA				dex
   575
   576 				; ---------------------  ASM Block 062  ---------------------
   577
   578 226A 8E C6 22			stx @sp
   579
   580 226D A5 8D			lda y+1
   581 226F 30 54			bmi stop
   582 2271 CD 03 25			cmp MAIN.SYSTEM.ScreenHeight+1
   583 2274 D0 05			bne sk0
   584 2276 A5 8C			lda y
   585 2278 CD 02 25			cmp MAIN.SYSTEM.ScreenHeight
   586 227B			sk0
   587 227B B0 48			bcs stop
   588
   589 227D A5 89			lda x+1
   590 227F 30 44			bmi stop
   591 2281 CD 01 25			cmp MAIN.SYSTEM.ScreenWidth+1
   592 2284 D0 05			bne sk1
   593 2286 A5 88			lda x
   594 2288 CD 00 25			cmp MAIN.SYSTEM.ScreenWidth
   595 228B			sk1
   596 228B B0 38			bcs stop
   597
   598 228D A4 8C			ldy y
   599 228F B9 24 29			lda adr.lineLo,y
   600 2292 18 69 00			add #0
   601 = 2294			lfb	equ *-1
   602 2295 85 92			sta :bp2
   603
   604 2297 B9 24 2A			lda adr.lineHi,y
   605 229A 69 00			adc #0
   606 = 229B			hfb	equ *-1
   607 229C 85 93			sta :bp2+1
   608
   609 229E 4C B5 22			jmp gr8
   610 = 229F			mode	equ *-2
   611
   612 				; ----------------------------
   613
   614 22A1 A6 88		gr15	ldx x
   615 22A3 BC 24 2B			ldy adr.div4,x
   616
   617 22A6 4C BE 22			jmp plot
   618
   619 				; ----------------------------
   620
   621 22A9 A5 88		gr9	lda x
   622 22AB 4A				lsr @
   623 22AC A8				tay
   624 22AD A5 88			lda x
   625 22AF 29 01			and #1
   626 22B1 AA				tax
   627
   628 22B2 4C BE 22			jmp plot
   629
   630 				; ----------------------------
   631
   632 22B5 A5 88		gr8	lda x
   633 22B7 AA				tax
   634
   635 22B8 46 89			lsr x+1
   636 22BA 6A				ror @
   637
   638 22BB 4A 4A			:2 lsr @
   639 22BD A8				tay
   640
   641 22BE B1 92		plot	lda (:bp2),y
   642 22C0 3D 24 25		acol	and adr.color_bits,x
   643 22C3 91 92			sta (:bp2),y
   644
   645 22C5 A2 00		stop	ldx #0
   646 = 22C6			@sp	equ *-1
   647
   648
   649 				; ------------------------------------------------------------
   650
   651 = 0088			X	= edx
   652 = 008C			Y	= ecx
   653 22C7			@exit
   654 					.ifdef @new
   655 					lda <@VarData
   656 					sta :ztmp
   657 					lda >@VarData
   658 					ldy #@VarDataSize-1
   659 					jmp @FreeMem
   660 					els
   661 22C7 60				rts						; ret
   662 					eif
   663 				.endl
   664
   665 22C8			.local	SETACTIVEBUFFER_0183				; PROCEDURE | ASSEMBLER | OVERLOAD
   666
   667 				; ------------------------------------------------------------
   668
   669 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   670 				; as Pointer
   671 22C8 B5 98 8D 2B 2C		mva :STACKORIGIN,x A
   672 22CD B5 A8 8D 2C 2C		mva :STACKORIGIN+STACKWIDTH,x A+1
   673 22D2 CA				dex
   674
   675 				; ---------------------  ASM Block 068  ---------------------
   676
   677 22D3 AD 2B 2C			lda a
   678 22D6 AC 2C 2C			ldy a+1
   679
   680 22D9 8D 28 2C			sta VideoRam
   681 22DC 8C 29 2C			sty VideoRam+1
   682
   683 					.ifdef PutPixel
   684 22DF 8D 94 22			sta PutPixel.lfb
   685 22E2 8C 9B 22			sty PutPixel.hfb
   686 					eif
   687
   688 					.ifdef GetPixel
   689 					sta GetPixel.lfb
   690 					sty GetPixel.hfb
   691 					eif
   692
   693 					.ifdef HLine
   694 					sta HLine.lfb
   695 					sty HLine.hfb
   696 					eif
   697
   698 					.ifdef fLine
   699 					sta fLine.lfb
   700 					sty fLine.hfb
   701 					eif
   702
   703
   704 				; ------------------------------------------------------------
   705
   706 = 2C2B			A	= DATAORIGIN+$072B
   707
   708 = 2C2B			@VarData	= A
   709 = 0002			@VarDataSize	= 2
   710
   711 22E5			@exit
   712 					.ifdef @new
   713 					lda <@VarData
   714 					sta :ztmp
   715 					lda >@VarData
   716 					ldy #@VarDataSize-1
   717 					jmp @FreeMem
   718 					els
   719 22E5 60				rts						; ret
   720 					eif
   721 				.endl
   722
   723 22E6			.local	INITGRAPH_0187					; PROCEDURE | OVERLOAD
   724
   725 				; ------------------------------------------------------------
   726
   727 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   728 				; as Pointer
   729 22E6 B5 98 8D 2D 2C		mva :STACKORIGIN,x MODE
   730 22EB CA				dex
   731
   732 				; optimize OK (FASTGRAPH), line = 966
   733
   734 22EC AD 2D 2C 8D 06 25		mva MODE SYSTEM.GRAPHMODE
   735
   736 				; optimize OK (FASTGRAPH), line = 968
   737
   738 22F2 AD 2D 2C			lda MODE
   739 22F5 29 0F			and #$0F
   740 22F7 8D 2E 2C			sta WIDTH
   741
   742 				; ------------------------------------------------------------
   743
   744 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   745 				; as Pointer
   746
   747 22FA E8				inx
   748 22FB AD 2E 2C 95 98		mva WIDTH :STACKORIGIN,x
   749
   750 				; GenerateCaseProlog
   751 2300 CA				dex
   752
   753 				; GenerateCaseEqualityCheck
   754 2301 B5 99			lda :STACKORIGIN+1,x
   755 2303 C9 06			cmp #$06
   756 2305 F0 04			beq @+
   757
   758 				; GenerateCaseEqualityCheck
   759 2307 C9 08			cmp #$08
   760 2309 D0 17			jne l_01AB
   761 230B			@
   762
   763 				; ---------------------  ASM Block 069  ---------------------
   764
   765 					.ifdef SetColor
   766 230B A9 40 8D FB 21 A9 + 	mwa #SetColor.gr8 SetColor.mode
   767 					.endif
   768
   769 					.ifdef PutPixel
   770 2315 A9 B5 8D 9F 22 A9 + 	mwa #PutPixel.gr8 PutPixel.mode
   771 					.endif
   772
   773 					.ifdef GetPixel
   774 					mwa #GetPixel.gr8 GetPixel.mode
   775 					.endif
   776
   777
   778 				; GenerateCaseStatementEpilog
   779 231F 4C 56 23			jmp a_0002
   780 2322			l_01AB
   781
   782 2322 B5 99			lda :STACKORIGIN+1,x
   783 2324 18				clc						; clear carry for add
   784 2325 69 F4			adc #$FF-$0B					; make m = $FF
   785 2327 69 03			adc #$0B-$09+1					; carry set if in range n to m
   786 2329 90 17			jcc l_01B4
   787 232B			@
   788
   789 				; ---------------------  ASM Block 070  ---------------------
   790
   791 					.ifdef SetColor
   792 232B A9 06 8D FB 21 A9 + 	mwa #SetColor.gr9 SetColor.mode
   793 					.endif
   794
   795 					.ifdef PutPixel
   796 2335 A9 A9 8D 9F 22 A9 + 	mwa #PutPixel.gr9 PutPixel.mode
   797 					.endif
   798
   799 					.ifdef GetPixel
   800 					mwa #GetPixel.gr9 GetPixel.mode
   801 					.endif
   802
   803 					.ifdef fLine
   804 					mva #$ea _nop
   805 					.endif
   806
   807
   808 				; GenerateCaseStatementEpilog
   809 233F 4C 56 23			jmp a_0002
   810 2342			l_01B4
   811
   812 				; ---------------------  ASM Block 071  ---------------------
   813
   814 					.ifdef SetColor
   815 2342 A9 FD 8D FB 21 A9 + 	mwa #SetColor.gr15 SetColor.mode
   816 					.endif
   817
   818 					.ifdef PutPixel
   819 234C A9 A1 8D 9F 22 A9 + 	mwa #PutPixel.gr15 PutPixel.mode
   820 					.endif
   821
   822 					.ifdef GetPixel
   823 					mwa #GetPixel.gr15 GetPixel.mode
   824 					.endif
   825
   826
   827 				; GenerateCaseEpilog
   828 2356			a_0002
   829
   830 				; ---------------------  ASM Block 072  ---------------------
   831
   832 2356 8A 48			txa:pha
   833
   834 2358 AD 2D 2C			lda mode
   835 235B 29 0F			and #$0f
   836 235D A8				tay
   837
   838 235E A2 60			ldx #$60	; 6*16
   839 2360 AD 2D 2C			lda mode	; %00010000 with text window
   840 2363 29 10			and #$10
   841 2365 49 10			eor #$10
   842 2367 09 02			ora #2		; read
   843
   844 					.nowarn @GRAPHICS
   844 2369 20 64 21		 JSR @GRAPHICS
   845
   846 236C 8C 16 25			sty GraphResult
   847
   848
   849 					.ifdef MAIN.@DEFINES.ROMOFF
   850 					inc portb
   851 					.endif
   852
   853 				; Fox/TQA
   854
   855 = 0057			dindex	equ $57
   856 = EE7D			tmccn	equ $ee7d
   857 = EE8D			tmrcn	equ $ee8d
   858
   859 236F A6 57			ldx dindex
   860 2371 BD 7D EE			lda tmccn,x
   861 2374 BC 8D EE			ldy tmrcn,x
   862 2377 A2 00			ldx #0
   863 2379 C9 40			cmp #<320
   864 237B D0 01 E8			sne:inx
   865
   866 				; X:A = horizontal resolution
   867 				; Y = vertical resolution
   868
   869 237E 8D 00 25			sta MAIN.SYSTEM.ScreenWidth
   870 2381 8E 01 25			stx MAIN.SYSTEM.ScreenWidth+1
   871
   872 2384 38 E9 01			sub #1
   873 2387 8D 10 25			sta WIN_RIGHT
   874 238A 8A				txa
   875 238B E9 00			sbc #0
   876 238D 8D 11 25			sta WIN_RIGHT+1
   877
   878 2390 8C 02 25			sty MAIN.SYSTEM.ScreenHeight
   879 2393 A9 00			lda #0
   880 2395 8D 03 25			sta MAIN.SYSTEM.ScreenHeight+1
   881
   882 2398 8D 0E 25			sta WIN_LEFT
   883 239B 8D 0F 25			sta WIN_LEFT+1
   884 239E 8D 12 25			sta WIN_TOP
   885 23A1 8D 13 25			sta WIN_TOP+1
   886
   887 23A4 8D 15 25			sta WIN_BOTTOM+1
   888 23A7 88				dey
   889 23A8 8C 14 25			sty WIN_BOTTOM
   890
   891
   892 = EE6D			tlshc	equ $ee6d
   893
   894 23AB A6 57			ldx dindex
   895 23AD BC 6D EE			ldy tlshc,x
   896 23B0 A9 05			lda #5
   897 23B2 0A			shift	asl @
   898 23B3 88				dey
   899 23B4 D0 FC			bne shift
   900
   901 23B6 8D 2E 2C			sta width
   902 				;	sta SCANLINE_WIDTH
   903
   904 					.ifdef fLine
   905 				;	lda width
   906 					sta fLine.w0
   907 					sta fLine.w1
   908 					sta fLine.w2
   909 					sta fLine.w3
   910 					.endif
   911
   912 					.ifdef MAIN.@DEFINES.ROMOFF
   913 					dec portb
   914 					.endif
   915
   916
   917 				; ---	init_tabs
   918
   919 23B9 A0 00			ldy #0
   920 23BB 84 92			sty :bp2
   921 23BD 84 93			sty :bp2+1
   922 23BF			it1
   923 23BF A5 93			lda :bp2+1
   924 23C1 99 24 2A			sta adr.lineHi,y
   925 23C4 A5 92			lda :bp2
   926 23C6 99 24 29			sta adr.lineLo,y
   927 23C9 18				clc
   928 23CA 6D 2E 2C			adc width
   929 23CD 85 92			sta :bp2
   930 23CF 90 02			scc
   931 23D1 E6 93			inc :bp2+1
   932
   933 23D3 C8				iny
   934 23D4 D0 E9			bne it1
   935
   936 23D6 A9 55 8D 1C 24		mva #$55 _col+1
   937
   938 23DB A2 03			ldx #3
   939 23DD 8E 0E 24			stx _and+1
   940 23E0 8A				txa
   941 23E1 9D 3C 24		l0	sta __oras,x
   942 23E4 0A				asl @
   943 23E5 0A				asl @
   944 23E6 CA				dex
   945 23E7 10 F8			bpl l0
   946
   947 23E9 AD 2D 2C			lda mode
   948 23EC 29 0F			and #$0f
   949 23EE C9 08			cmp #8
   950 23F0 F0 07			beq x8
   951 23F2 C9 06			cmp #6
   952 23F4 F0 03			beq x8
   953
   954 23F6 4C 0C 24			jmp it2
   955 23F9			x8
   956 23F9 A9 FF 8D 1C 24		mva #$ff _col+1
   957
   958 23FE A2 07			ldx #7
   959 2400 8E 0E 24			stx _and+1
   960 2403 A9 01			lda #1
   961 2405 9D 3C 24		l1	sta __oras,x
   962 2408 0A				asl @
   963 2409 CA				dex
   964 240A 10 F9			bpl l1
   965
   966 240C 98			it2	tya
   967 240D 29 03		_and	and #3
   968 240F AA				tax
   969 2410 BD 3C 24			lda __oras,x
   970 2413 49 FF			eor #$ff
   971 2415 99 24 25			sta adr.color_bits+$000,y ; color0
   972 2418 BD 3C 24			lda __oras,x
   973 241B 29 55		_col	and #$55
   974 241D 99 24 26			sta adr.color_bits+$100,y ; color1
   975 2420 BD 3C 24			lda __oras,x
   976 2423 29 AA			and #$aa
   977 2425 99 24 27			sta adr.color_bits+$200,y ; color2
   978 2428 BD 3C 24			lda __oras,x
   979 242B 29 FF			and #$ff
   980 242D 99 24 28			sta adr.color_bits+$300,y ; color3
   981 2430 98				tya
   982 2431 4A				lsr @
   983 2432 4A			_nop	lsr @
   984 2433 99 24 2B			sta adr.div4,y
   985 2436 C8				iny
   986 2437 D0 D3			bne it2
   987
   988 2439 4C 44 24			jmp stop
   989
   990 243C C0 30 0C 03		__oras	dta $c0,$30,$0c,$03
   991 2440 00 00 00 00			dta 0,0,0,0
   992
   993 2444 68 AA		stop	pla:tax
   994
   995
   996 				; optimize FAIL ('SETACTIVEBUFFER_0183', FASTGRAPH), line = 1188
   997
   998 2446 E8				inx
   999 2447 A5 58 95 98			mva ATARI.SAVMSC :STACKORIGIN,x
  1000 244B A5 59 95 A8			mva ATARI.SAVMSC+1 :STACKORIGIN+STACKWIDTH,x
  1001 244F 20 C8 22			jsr SETACTIVEBUFFER_0183
  1002
  1003 				; ------------------------------------------------------------
  1004
  1005 = 2C2D			MODE	= DATAORIGIN+$072D
  1006 = 2C2E			WIDTH	= DATAORIGIN+$072E
  1007
  1008 = 2C2D			@VarData	= MODE
  1009 = 0002			@VarDataSize	= 2
  1010
  1011 2452			@exit
  1012 					.ifdef @new
  1013 					lda <@VarData
  1014 					sta :ztmp
  1015 					lda >@VarData
  1016 					ldy #@VarDataSize-1
  1017 					jmp @FreeMem
  1018 					els
  1019 2452 60				rts						; ret
  1020 					eif
  1021 				.endl
  1022
  1023 				; ------------------------------------------------------------
  1024
  1025 = 0080			CURRENTDRIVER	= $80
  1026 = 0000			DETECT	= $00
  1027 = 0001			CGA	= $01
  1028 = 0002			MCGA	= $02
  1029 = 0003			EGA	= $03
  1030 = 0004			EGA64	= $04
  1031 = 0005			EGAMONO	= $05
  1032 = 0006			LOWRES	= $06
  1033 = 0007			HERCMONO	= $07
  1034 = 0009			VGA	= $09
  1035 = 000A			VESA	= $0A
  1036 = 000B			D1BIT	= $0B
  1037 = 000C			D2BIT	= $0C
  1038 = 000D			D4BIT	= $0D
  1039 = 000E			D6BIT	= $0E
  1040 = 000F			D8BIT	= $0F
  1041 = 0010			D12BIT	= $10
  1042 = 0018			M640X400	= $18
  1043 = 0018			M640X480	= $18
  1044 = 0001			GROK	= $01
  1045 = 00FF			GRNOINITGRAPH	= $FF
  1046 = 00FE			GRNOTDETECTED	= $FE
  1047 = 00FD			GRFILENOTFOUND	= $FD
  1048 = 00FC			GRINVALIDDRIVER	= $FC
  1049 = 00FB			GRNOLOADMEM	= $FB
  1050 = 00FA			GRNOSCANMEM	= $FA
  1051 = 00F9			GRNOFLOODMEM	= $F9
  1052 = 00F8			GRFONTNOTFOUND	= $F8
  1053 = 00F7			GRNOFONTMEM	= $F7
  1054 = 00F6			GRINVALIDMODE	= $F6
  1055 = 00F5			GRERROR	= $F5
  1056 = 00F4			GRIOERROR	= $F4
  1057 = 00F3			GRINVALIDFONT	= $F3
  1058 = 00F2			GRINVALIDFONTNUM	= $F2
  1059 = 00EE			GRINVALIDVERSION	= $EE
  1060 = 0000			CGAC0	= $00
  1061 = 0001			CGAC1	= $01
  1062 = 0002			CGAC2	= $02
  1063 = 0003			CGAC3	= $03
  1064 = 0004			CGAHI	= $04
  1065 = 0000			MCGAC0	= $00
  1066 = 0001			MCGAC1	= $01
  1067 = 0002			MCGAC2	= $02
  1068 = 0003			MCGAC3	= $03
  1069 = 0004			MCGAMED	= $04
  1070 = 0005			MCGAHI	= $05
  1071 = 0000			EGALO	= $00
  1072 = 0001			EGAHI	= $01
  1073 = 0000			EGA64LO	= $00
  1074 = 0001			EGA64HI	= $01
  1075 = 0003			EGAMONOHI	= $03
  1076 = 000A			VGALO	= $0A
  1077 = 001F			VGAMED	= $1F
  1078 = 0018			VGAHI	= $18
  1079 = 250E			WIN_LEFT	= DATAORIGIN+$000E
  1080 = 2510			WIN_RIGHT	= DATAORIGIN+$0010
  1081 = 2512			WIN_TOP	= DATAORIGIN+$0012
  1082 = 2514			WIN_BOTTOM	= DATAORIGIN+$0014
  1083 = 2516			GRAPHRESULT	= DATAORIGIN+$0016
  1084 = 2517			GETCOLOR	= DATAORIGIN+$0017
  1085 = 2518			adr.LASTARCCOORDS	= [DATAORIGIN+$0018] .array [5]
  1086 2453			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1087 = 2518			LASTARCCOORDS.X	= DATAORIGIN+$0018
  1088 = 251A			LASTARCCOORDS.Y	= DATAORIGIN+$001A
  1089 = 251C			LASTARCCOORDS.XSTART	= DATAORIGIN+$001C
  1090 = 251E			LASTARCCOORDS.YSTART	= DATAORIGIN+$001E
  1091 = 2520			LASTARCCOORDS.XEND	= DATAORIGIN+$0020
  1092 = 2522			LASTARCCOORDS.YEND	= DATAORIGIN+$0022
  1093 = 2524			adr.COLOR_BITS	= [DATAORIGIN+$0024] .array [1024]
  1094 2453			.var COLOR_BITS	= adr.COLOR_BITS .word
  1095 = 2924			adr.LINELO	= [DATAORIGIN+$0424] .array [256]
  1096 2453			.var LINELO	= adr.LINELO .word
  1097 = 2A24			adr.LINEHI	= [DATAORIGIN+$0524] .array [256]
  1098 2453			.var LINEHI	= adr.LINEHI .word
  1099 = 2B24			adr.DIV4	= [DATAORIGIN+$0624] .array [256]
  1100 2453			.var DIV4	= adr.DIV4 .word
  1101 = 2C24			CURRENTX	= DATAORIGIN+$0724
  1102 = 2C26			CURRENTY	= DATAORIGIN+$0726
  1103 = 2C28			VIDEORAM	= DATAORIGIN+$0728
  1104
  1105 = 2453 18 25		LASTARCCOORDS
  1105 = 2455 24 25		COLOR_BITS
  1105 = 2457 24 29		LINELO
  1105 = 2459 24 2A		LINEHI
  1105 = 245B 24 2B		DIV4
  1105 				.endl							; UNIT FASTGRAPH
  1106 245D			l_00FE
  1107
  1108 				; optimize FAIL ('FASTGRAPH.INITGRAPH_0187', depacker.pas), line = 11
  1109
  1110 245D E8				inx
  1111 245E A9 15 95 98			mva #$15 :STACKORIGIN,x
  1112 2462 20 E6 22			jsr FASTGRAPH.INITGRAPH_0187
  1113
  1114 				; optimize FAIL ('FASTGRAPH.SETCOLOR', depacker.pas), line = 11
  1115
  1116 2465 E8				inx
  1117 2466 A9 01 95 98			mva #$01 :STACKORIGIN,x
  1118 246A 20 F1 21			jsr FASTGRAPH.SETCOLOR
  1119
  1120 				; optimize OK (depacker.pas), line = 13
  1121
  1122 246D A9 00 8D 33 2C		mva #$00 X
  1123 2472 8D 34 2C			sta Y
  1124
  1125 				; optimize OK (depacker.pas), line = 14
  1126
  1127 2475 A9 41 8D 35 2C		mva #$41 DICFIRSTLETTER
  1128
  1129 				; --- For
  1130
  1131 				; optimize OK (depacker.pas), line = 16
  1132
  1133 247A A9 00 8D 31 2C		mva #$00 I0
  1134
  1135 247F			l_021E
  1136 				; --- ForToDoCondition
  1137 247F AD 31 2C			lda I0
  1138 2482 C9 F5			cmp #$F5
  1139 2484 B0 5A			jcs l_022C
  1140
  1141 				; optimize OK (depacker.pas), line = 17
  1142
  1143 2486 AD 2F 2C			lda QRCODE
  1144 2489 18 6D 31 2C			add I0
  1145 248D A8				tay
  1146 248E AD 30 2C			lda QRCODE+1
  1147 2491 69 00			adc #$00
  1148 2493 85 91			sta :bp+1
  1149 2495 B1 90			lda (:bp),y
  1150 2497 38 ED 35 2C			sub DICFIRSTLETTER
  1151 249B 8D 36 2C			sta QRBLOCK
  1152
  1153 				; --- For
  1154
  1155 				; optimize OK (depacker.pas), line = 18
  1156
  1157 249E A9 04 8D 32 2C		mva #$04 I1
  1158
  1159 24A3			l_0244
  1160 				; --- ForToDoCondition
  1161
  1162 				; optimize OK (depacker.pas), line = 19
  1163
  1164 24A3 AD 36 2C			lda QRBLOCK
  1165 24A6 29 10			and #$10
  1166 24A8 F0 17			jeq l_0268
  1167
  1168 				; optimize FAIL ('FASTGRAPH.PUTPIXEL', depacker.pas), line = 19
  1169
  1170 24AA E8				inx
  1171 24AB AD 33 2C 95 98		mva X :STACKORIGIN,x
  1172 24B0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1173 24B4 E8				inx
  1174 24B5 AD 34 2C 95 98		mva Y :STACKORIGIN,x
  1175 24BA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1176 24BE 20 58 22			jsr FASTGRAPH.PUTPIXEL
  1177 24C1			l_0268
  1178
  1179 				; optimize OK (depacker.pas), line = 20
  1180
  1181 24C1 0E 36 2C			asl QRBLOCK
  1182
  1183 				; optimize OK (depacker.pas), line = 21
  1184
  1185 24C4 EE 33 2C			inc X
  1186
  1187 				; optimize OK (depacker.pas), line = 22
  1188
  1189 24C7 AD 33 2C			lda X
  1190 24CA C9 23			cmp #$23
  1191 24CC D0 08			jne l_0298
  1192
  1193 				; optimize OK (depacker.pas), line = 23
  1194
  1195 24CE A9 00 8D 33 2C		mva #$00 X
  1196 24D3 EE 34 2C			inc Y
  1197 24D6			l_0298
  1198
  1199 				; --- ForToDoEpilog
  1200 24D6 CE 32 2C			dec I1
  1201 24D9 10 C8			jpl l_0244
  1202 24DB			l_0252
  1203
  1204 				; --- ForToDoEpilog
  1205 24DB EE 31 2C			inc I0
  1206 24DE D0 9F			jne l_021E
  1207 24E0			l_022C
  1208
  1209 24E0 20 D2 21			jsr CRT.READKEY					; call Entry
  1210
  1211 24E3 CA				dex
  1212
  1213 				; optimize FAIL ('CRT.TEXTMODE', depacker.pas), line = 28
  1214
  1215 24E4 E8				inx
  1216 24E5 A9 00 95 98			mva #$00 :STACKORIGIN,x
  1217 24E9 20 E3 21			jsr CRT.TEXTMODE
  1218
  1219 				; ------------------------------------------------------------
  1220
  1221 = 2C2F			QRCODE	= DATAORIGIN+$072F
  1222 = 2C31			I0	= DATAORIGIN+$0731
  1223 = 2C32			I1	= DATAORIGIN+$0732
  1224 = 2C33			X	= DATAORIGIN+$0733
  1225 = 2C34			Y	= DATAORIGIN+$0734
  1226 = 2C35			DICFIRSTLETTER	= DATAORIGIN+$0735
  1227 = 2C36			QRBLOCK	= DATAORIGIN+$0736
  1228 = 00F4			@FORTMP_021B	= $F4
  1229 = 0000			@FORTMP_0241	= $00
  1230 24EC			@exit
  1231
  1232 24EC A2 00		@halt	ldx #0
  1233 24EE 9A				txs
  1234 					.ifdef MAIN.@DEFINES.ROMOFF
  1235 					inc portb
  1236 					.endif
  1237
  1238 24EF 60				rts
  1239
  1240 				; ------------------------------------------------------------
  1241
  1242 24F0 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1243
  1244 				; ------------------------------------------------------------
  1245
  1246 2500			.local	@DEFINES
  1247 2500			ATARI
  1248 				.endl
  1249
  1250 				.endl							; MAIN
  1251
  1252 				; ------------------------------------------------------------
  1253 				; ------------------------------------------------------------
  1254
  1255 				.macro	UNITINITIALIZATION
  1256 				
  1257 					.ifdef MAIN.SYSTEM.@UnitInit
  1258 					jsr MAIN.SYSTEM.@UnitInit
  1259 					eif
  1260 				
  1261 					.ifdef MAIN.ATARI.@UnitInit
  1262 					jsr MAIN.ATARI.@UnitInit
  1263 					eif
  1264 				
  1265 					.ifdef MAIN.CRT.@UnitInit
  1266 					jsr MAIN.CRT.@UnitInit
  1267 					eif
  1268 				
  1269 					.ifdef MAIN.TYPES.@UnitInit
  1270 					jsr MAIN.TYPES.@UnitInit
  1271 					eif
  1272 				
  1273 					.ifdef MAIN.FASTGRAPH.@UnitInit
  1274 					jsr MAIN.FASTGRAPH.@UnitInit
  1275 					eif
  1276 				.endm
  1277
  1278 				; ------------------------------------------------------------
  1279
  1280 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1281 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1281 				SYSTEM: $21CE..$21D1
  1282 					eif
  1283
  1284 					ift .SIZEOF(MAIN.ATARI) > 0
  1285 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1286 					eif
  1287
  1288 					ift .SIZEOF(MAIN.CRT) > 0
  1289 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1289 				CRT: $21D2..$21F0
  1290 					eif
  1291
  1292 					ift .SIZEOF(MAIN.TYPES) > 0
  1293 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1294 					eif
  1295
  1296 					ift .SIZEOF(MAIN.FASTGRAPH) > 0
  1297 					.print 'FASTGRAPH: ',MAIN.FASTGRAPH,'..',MAIN.FASTGRAPH+.SIZEOF(MAIN.FASTGRAPH)-1
  1297 				FASTGRAPH: $21F1..$245C
  1298 					eif
  1299
  1300 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1300 				CODE: $2000..$24FF
  1301
  1302 				; ------------------------------------------------------------
  1303
  1304 2500			DATAORIGIN
  1305 2500 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $27 $00 $00 $00 $17 $00 $00 $00
  1306 2518 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1307 2530 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1308 2548 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1309 2560 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1310 2578 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1311 2590 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1312 25A8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1313 25C0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1314 25D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1315 25F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1316 2608 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1317 2620 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1318 2638 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1319 2650 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1320 2668 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1321 2680 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1322 2698 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1323 26B0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1324 26C8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1325 26E0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1326 26F8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1327 2710 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1328 2728 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1329 2740 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1330 2758 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1331 2770 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1332 2788 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1333 27A0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1334 27B8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1335 27D0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1336 27E8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1337 2800 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1338 2818 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1339 2830 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1340 2848 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1341 2860 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1342 2878 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1343 2890 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1344 28A8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1345 28C0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1346 28D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1347 28F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1348 2908 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1349 2920 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1350 2938 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1351 2950 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1352 2968 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1353 2980 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1354 2998 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1355 29B0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1356 29C8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1357 29E0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1358 29F8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1359 2A10 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1360 2A28 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1361 2A40 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1362 2A58 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1363 2A70 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1364 2A88 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1365 2AA0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1366 2AB8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1367 2AD0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1368 2AE8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1369 2B00 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1370 2B18 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1371 2B30 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1372 2B48 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1373 2B60 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1374 2B78 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1375 2B90 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1376 2BA8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1377 2BC0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1378 2BD8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1379 2BF0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1380 2C08 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1381 2C20 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 <[CODEORIGIN+$0001]  >[CODEORIGIN+$0001]
  1382
  1383 = 0731			VARINITSIZE	= *-DATAORIGIN
  1384 = 0737			VARDATASIZE	= 1847
  1385
  1386 = 2C37			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1387
  1388 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1388 				DATA: $2500..$2C37
  1389
  1390 02E0-02E1> 9E 21			run START
  1391
  1392 				; ------------------------------------------------------------
  1393
  1394 				.macro	STATICDATA
  1395 				.by  $F5 $60 $60 $60 $60 $60 $60 $60  $51 $43 $46 $48 $5F $49 $42 $58  $5B $47 $51 $50 $5C $5E $55 $4B
  1396 				.by  $53 $45 $5D $5B $46 $55 $4B $4B  $47 $5B $5B $46 $55 $4C $5F $4F  $5B $4B $46 $58 $5B $5A $45 $45
  1397 				.by  $5C $5E $51 $43 $56 $4B $56 $49  $42 $60 $60 $4D $59 $5F $50 $60  $54 $44 $5B $4E $4B $4E $42 $54
  1398 				.by  $46 $46 $53 $50 $57 $4E $55 $4B  $5A $5A $5A $5F $54 $56 $5E $53  $55 $5F $58 $5A $5E $41 $55 $42
  1399 				.by  $46 $50 $48 $55 $4F $50 $59 $57  $41 $4E $57 $43 $57 $41 $5D $5D  $54 $54 $45 $56 $5A $5E $49 $4A
  1400 				.by  $57 $59 $5A $45 $44 $57 $60 $57  $5E $4D $4F $56 $50 $4E $58 $51  $54 $56 $5A $5F $54 $53 $46 $5E
  1401 				.by  $56 $52 $5D $50 $5D $4B $4B $5E  $43 $43 $60 $53 $56 $46 $53 $5C  $57 $5E $5E $53 $50 $44 $52 $5F
  1402 				.by  $5C $5F $5F $53 $5A $5B $60 $50  $52 $4C $44 $5E $44 $41 $54 $60  $5F $4D $4A $60 $4F $5C $51 $44
  1403 				.by  $4F $56 $52 $4B $48 $58 $5B $5F  $55 $51 $4F $4A $55 $4B $45 $4D  $54 $41 $5E $55 $4C $4B $53 $50
  1404 				.by  $50 $5A $55 $4C $56 $42 $5A $50  $4C $58 $5B $49 $46 $5A $51 $50  $51 $43 $52 $4C $44 $5C $5E $60
  1405 				.by  $60 $60 $60 $60 $60 $60 $00
  1406 				.endm
  1407
  1408 					end
