mads 2.1.1
   204 					opt l+
   106
   107 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   107 				ZPAGE: $0080..$00D7
   108
   109 				.print 'RTLIB: ',RTLIB,'..',*-1
   109 				RTLIB: $201A..$2061
   110
   111 				; ------------------------------------------------------------
   112
   113 2062			START
   114 2062 BA				tsx
   115 2063 8E C7 21			stx MAIN.@halt+1
   116
   117 					.ifdef fmulinit
   118 					fmulinit
   119 					eif
   120
   121 = 0007			VLEN	= VARDATASIZE-VARINITSIZE
   122 = 21E4			VADR	= DATAORIGIN+VARINITSIZE
   123
   124 					ift VADR > $BFFF
   125 					ert 'Invalid memory address range ',VADR
   126 					eli (VLEN>0) && (VLEN<=256)
   127 2066 A2 F9			ldx #256-VLEN
   128 2068 A9 00			lda #$00
   129 206A 9D EB 20 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   130 					eli VLEN>0
   131 					@fill #VADR #VLEN #$00
   132 					eif
   133
   134 2070 A9 EB 85 82 A9 21 + 	mwa #PROGRAMSTACK psptr
   135
   136 					.ifdef MAIN.@DEFINES.ROMOFF
   137 					icl 'atari\romoff.asm'
   138 					.endif
   139
   140 2078 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   141 207A BD 40 03 9D CC 21 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   142
   143 2083 E8				inx						; X = 0
   144 2084 86 90			stx bp						; BP = 0
   145
   146 2086 8E 08 D2			stx audctl					; reset POKEY
   147 2089 A9 03			lda #3
   148 208B 8D 0F D2			sta skctl
   149
   150 208E CA				dex						; X = 255
   151
   152 208F				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: fire.a65]
   153
   154 208F			.local	MAIN						; PROCEDURE
   155
   156 208F 4C B1 20			jmp l_0007
   157
   158 				; ------------------------------------------------------------
   159
   160 2092			.local	SYSTEM						; UNIT
   161
   162 2092			.local	FILLCHAR_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   163
   164 				; ------------------------------------------------------------
   165
   166 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   167 				; as Pointer
   168 2092 B5 98 85 84			mva :STACKORIGIN,x VALUE
   169 2096 CA				dex
   170
   171 				; ------------------------------------------------------------
   172
   173 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   174 				; as Pointer
   175 2097 B5 98 85 8C			mva :STACKORIGIN,x COUNT
   176 209B B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   177 209F CA				dex
   178
   179 				; ------------------------------------------------------------
   180
   181 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   182 				; as Pointer
   183 20A0 B5 98 85 88			mva :STACKORIGIN,x A
   184 20A4 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   185 20A8 CA				dex
   186
   187 				; ---------------------  ASM Block 024  ---------------------
   188
   189 20A9 20 1A 20			jsr @fill
   190
   191
   192 				; ------------------------------------------------------------
   193
   194 = 0088			A	= edx
   195 = 008C			COUNT	= ecx
   196 = 0084			VALUE	= eax
   197 20AC			@exit
   198 					.ifdef @new
   199 					lda <@VarData
   200 					sta :ztmp
   201 					lda >@VarData
   202 					ldy #@VarDataSize-1
   203 					jmp @FreeMem
   204 					els
   205 20AC 60				rts						; ret
   206 					eif
   207 				.endl
   208
   209 				; ------------------------------------------------------------
   210
   211 = 0101			__PORTB_BANKS	= $0101
   212 = 0648			M_PI_2	= $0648
   213 = 0192			D_PI_2	= $0192
   214 = 0004			D_PI_180	= $04
   215 = 0000			MGTIA	= $00
   216 = 0080			MVBXE	= $80
   217 = 0000			VBXE_XDLADR	= $00
   218 = 0100			VBXE_BCBADR	= $0100
   219 = 1000			VBXE_MAPADR	= $1000
   220 = 5000			VBXE_OVRADR	= $5000
   221 = B000			VBXE_WINDOW	= $B000
   222 = 0000			IDLI	= $00
   223 = 0001			IVBL	= $01
   224 = 00FE			CH_DELCHR	= $FE
   225 = 009B			CH_ENTER	= $9B
   226 = 001B			CH_ESC	= $1B
   227 = 001C			CH_CURS_UP	= $1C
   228 = 001D			CH_CURS_DOWN	= $1D
   229 = 001E			CH_CURS_LEFT	= $1E
   230 = 001F			CH_CURS_RIGHT	= $1F
   231 = 007F			CH_TAB	= $7F
   232 = 009B			CH_EOL	= $9B
   233 = 007D			CH_CLR	= $7D
   234 = 00FD			CH_BELL	= $FD
   235 = 007E			CH_DEL	= $7E
   236 = 009C			CH_DELLINE	= $9C
   237 = 009D			CH_INSLINE	= $9D
   238 = 0000			COLOR_BLACK	= $00
   239 = 000E			COLOR_WHITE	= $0E
   240 = 0032			COLOR_RED	= $32
   241 = 0096			COLOR_CYAN	= $96
   242 = 0068			COLOR_VIOLET	= $68
   243 = 00C4			COLOR_GREEN	= $C4
   244 = 0074			COLOR_BLUE	= $74
   245 = 00EE			COLOR_YELLOW	= $EE
   246 = 0028			COLOR_ORANGE	= $28
   247 = 00E4			COLOR_BROWN	= $E4
   248 = 003C			COLOR_LIGHTRED	= $3C
   249 = 0004			COLOR_GRAY1	= $04
   250 = 0006			COLOR_GRAY2	= $06
   251 = 000A			COLOR_GRAY3	= $0A
   252 = 00CC			COLOR_LIGHTGREEN	= $CC
   253 = 007C			COLOR_LIGHTBLUE	= $7C
   254 = 0004			FMOPENREAD	= $04
   255 = 0008			FMOPENWRITE	= $08
   256 = 0009			FMOPENAPPEND	= $09
   257 = 000C			FMOPENREADWRITE	= $0C
   258 = 21DE			SCREENWIDTH	= DATAORIGIN+$0000
   259 = 21E0			SCREENHEIGHT	= DATAORIGIN+$0002
   260 = 21E2			DATESEPARATOR	= DATAORIGIN+$0004
   261 = D014			TVSYSTEM	= $D014
   262 = D20A			RND	= $D20A
   263 = 02C0			adr.PALETTE	= $02C0
   264 20AD			.var PALETTE	= adr.PALETTE .word
   265 = D012			adr.HPALETTE	= $D012
   266 20AD			.var HPALETTE	= adr.HPALETTE .word
   267 = 21E3			FILEMODE	= DATAORIGIN+$0005
   268 = 21E4			GRAPHMODE	= DATAORIGIN+$0006
   269 = 21E5			IORESULT	= DATAORIGIN+$0007
   270 = 21E6			EOLN	= DATAORIGIN+$0008
   271 = 21E7			RNDSEED	= DATAORIGIN+$0009
   272
   273 = 20AD C0 02		PALETTE
   273 = 20AF 12 D0		HPALETTE
   273 				.endl							; UNIT SYSTEM
   274
   275 				; ------------------------------------------------------------
   276
   277 20B1			.local	ATARI						; UNIT
   278
   279 				; ------------------------------------------------------------
   280
   281 = 0012			RTCLOK	= $12
   282 = 004D			ATRACT	= $4D
   283 = 0052			LMARGIN	= $52
   284 = 0053			RMARGIN	= $53
   285 = 0054			ROWCRS	= $54
   286 = 0055			COLCRS	= $55
   287 = 0057			DINDEX	= $57
   288 = 0058			SAVMSC	= $58
   289 = 0062			PALNTS	= $62
   290 = 006A			RAMTOP	= $6A
   291 = 0200			VDSLST	= $0200
   292 = 0230			SDLSTL	= $0230
   293 = 0290			TXTROW	= $0290
   294 = 0291			TXTCOL	= $0291
   295 = 0293			TINDEX	= $0293
   296 = 0294			TXTMSC	= $0294
   297 = 022F			SDMCTL	= $022F
   298 = 026F			GPRIOR	= $026F
   299 = 02F0			CRSINH	= $02F0
   300 = 02F3			CHACT	= $02F3
   301 = 02F4			CHBAS	= $02F4
   302 = 02FC			CH	= $02FC
   303 = 02C0			PCOLR0	= $02C0
   304 = 02C1			PCOLR1	= $02C1
   305 = 02C2			PCOLR2	= $02C2
   306 = 02C3			PCOLR3	= $02C3
   307 = 02C4			COLOR0	= $02C4
   308 = 02C5			COLOR1	= $02C5
   309 = 02C6			COLOR2	= $02C6
   310 = 02C7			COLOR3	= $02C7
   311 = 02C8			COLOR4	= $02C8
   312 = 02C8			COLBAKS	= $02C8
   313 = D000			HPOSP0	= $D000
   314 = D001			HPOSP1	= $D001
   315 = D002			HPOSP2	= $D002
   316 = D003			HPOSP3	= $D003
   317 = D004			HPOSM0	= $D004
   318 = D005			HPOSM1	= $D005
   319 = D006			HPOSM2	= $D006
   320 = D007			HPOSM3	= $D007
   321 = D008			SIZEP0	= $D008
   322 = D009			SIZEP1	= $D009
   323 = D00A			SIZEP2	= $D00A
   324 = D00B			SIZEP3	= $D00B
   325 = D00C			SIZEM	= $D00C
   326 = D00D			GRAFP0	= $D00D
   327 = D00E			GRAFP1	= $D00E
   328 = D00F			GRAFP2	= $D00F
   329 = D010			GRAFP3	= $D010
   330 = D011			GRAFM	= $D011
   331 = D004			P0PF	= $D004
   332 = D014			PAL	= $D014
   333 = D012			COLPM0	= $D012
   334 = D013			COLPM1	= $D013
   335 = D014			COLPM2	= $D014
   336 = D015			COLPM3	= $D015
   337 = D016			COLPF0	= $D016
   338 = D017			COLPF1	= $D017
   339 = D018			COLPF2	= $D018
   340 = D019			COLPF3	= $D019
   341 = D01A			COLBK	= $D01A
   342 = D01B			PRIOR	= $D01B
   343 = D01D			GRACTL	= $D01D
   344 = D01E			HITCLR	= $D01E
   345 = D200			AUDF1	= $D200
   346 = D201			AUDC1	= $D201
   347 = D202			AUDF2	= $D202
   348 = D203			AUDC2	= $D203
   349 = D204			AUDF3	= $D204
   350 = D205			AUDC3	= $D205
   351 = D206			AUDF4	= $D206
   352 = D207			AUDC4	= $D207
   353 = D208			AUDCTL	= $D208
   354 = D20F			SKSTAT	= $D20F
   355 = D300			PORTA	= $D300
   356 = D301			PORTB	= $D301
   357 = D400			DMACTL	= $D400
   358 = D401			CHACTL	= $D401
   359 = D402			DLISTL	= $D402
   360 = D404			HSCROL	= $D404
   361 = D405			VSCROL	= $D405
   362 = D407			PMBASE	= $D407
   363 = D409			CHBASE	= $D409
   364 = D40A			WSYNC	= $D40A
   365 = D40B			VCOUNT	= $D40B
   366 = D40C			PENH	= $D40C
   367 = D40D			PENV	= $D40D
   368 = D40E			NMIEN	= $D40E
   369
   370 				.endl							; UNIT ATARI
   371 20B1			l_0007
   372
   373 				; optimize OK (fire.pas), line = 26
   374
   375 20B1 A9 20 8D C8 02		mva #$20 ATARI.COLOR4
   376 20B6 A9 00 8D EA 21		mva #$00 TMP
   377
   378 				; optimize OK (fire.pas), line = 27
   379
   380 20BB 8D 30 02			sta ATARI.SDLSTL
   381 20BE A9 20 8D 31 02		mva #$20 ATARI.SDLSTL+1
   382 20C3 A9 60 8D F4 02		mva #$60 ATARI.CHBAS
   383
   384 				; optimize OK (fire.pas), line = 28
   385
   386 20C8 A9 40 8D 6F 02		mva #$40 ATARI.GPRIOR
   387 20CD A9 21 8D 2F 02		mva #$21 ATARI.SDMCTL
   388
   389 				; optimize OK (fire.pas), line = 30
   390
   391 20D2 A9 00 85 E1			mva #$00 P0
   392 20D6 A9 60 85 E2			mva #$60 P0+1
   393
   394 				; optimize OK (fire.pas), line = 31
   395
   396 20DA A9 00 85 E0			mva #$00 B0I
   397
   398 20DE			l_0085
   399 				; --- ForToDoCondition
   400 20DE A5 E0			lda B0I
   401 20E0 C9 10			cmp #$10
   402 20E2 B0 29			jcs l_0093
   403
   404 				; optimize OK (fire.pas), line = 32
   405
   406 20E4 A0 00			ldy #$00
   407
   408 20E6			l_009C
   409 				; --- ForToDoCondition
   410 20E6 C0 08			cpy #$08
   411 20E8 B0 08			jcs l_00AA
   412 20EA AD EA 21			lda TMP
   413 20ED 91 E1			sta (P0),y
   414
   415 				; --- ForToDoEpilog
   416 20EF C8				iny
   417 20F0 D0 F4			jne l_009C
   418 20F2			l_00AA
   419 20F2 8C E9 21			sty B1I
   420
   421 				; optimize OK (fire.pas), line = 33
   422
   423 20F5 AD EA 21			lda TMP
   424 20F8 18 69 11			add #$11
   425 20FB 8D EA 21			sta TMP
   426 20FE A5 E1			lda P0
   427 2100 18 69 08			add #$08
   428 2103 85 E1			sta P0
   429 2105 90 02			scc
   430 2107 E6 E2			inc P0+1
   431
   432 				; --- ForToDoEpilog
   433 2109 E6 E0			inc B0I
   434 210B D0 D1			jne l_0085
   435 210D			l_0093
   436
   437 				; optimize OK (fire.pas), line = 36
   438
   439 210D				.LOCAL
   440 210D A0 00			ldy #$00
   441 210F 98				tya
   442 2110 99 00 64 99 80 64 + fill	:8 sta $6400+#*$80,y
   443 2128 C8				iny
   444 2129 10 E5			bpl fill
   445 					.ENDL
   446
   447 				; --- WhileProlog
   448 212B 4C C3 21			jmp l_00C5
   449 212E			l_00C6
   450
   451 				; optimize OK (fire.pas), line = 39
   452
   453 212E A9 E1 85 E1			mva #$E1 P0
   454 2132 A9 63 85 E2			mva #$63 P0+1
   455
   456 				; optimize OK (fire.pas), line = 40
   457
   458 2136 A9 E1 85 E3			mva #$E1 P1
   459 213A A9 64 85 E4			mva #$64 P1+1
   460
   461 				; optimize OK (fire.pas), line = 41
   462
   463 213E A9 E1 85 E5			mva #$E1 P2
   464 2142 A9 65 85 E6			mva #$65 P2+1
   465
   466 				; optimize OK (fire.pas), line = 43
   467
   468 2146 A9 FF 85 E0			mva #$FF B0I
   469 214A 4C 4F 21			jmp l_00DBf
   470 214D			l_00DB
   471 				; --- ForToDoCondition
   472 214D C6 E0			dec B0I
   473 214F			l_00DBf
   474
   475 				; optimize OK (fire.pas), line = 44
   476
   477 214F A0 1E			ldy #$1E
   478 2151 B1 E1			lda (P0),y
   479 2153 C8				iny
   480 2154 18 71 E1			add (P0),y
   481 2157 C8				iny
   482 2158 18 71 E1			add (P0),y
   483 215B A0 3F			ldy #$3F
   484 215D 18 71 E1			add (P0),y
   485 2160 4A				lsr @
   486 2161 4A				lsr @
   487 2162 A0 00			ldy #$00
   488 2164 91 E1			sta (P0),y
   489
   490 				; optimize OK (fire.pas), line = 45
   491
   492 2166 A0 1E			ldy #$1E
   493 2168 B1 E3			lda (P1),y
   494 216A C8				iny
   495 216B 18 71 E3			add (P1),y
   496 216E C8				iny
   497 216F 18 71 E3			add (P1),y
   498 2172 A0 3F			ldy #$3F
   499 2174 18 71 E3			add (P1),y
   500 2177 4A				lsr @
   501 2178 4A				lsr @
   502 2179 A0 00			ldy #$00
   503 217B 91 E3			sta (P1),y
   504
   505 				; optimize OK (fire.pas), line = 46
   506
   507 217D A0 1E			ldy #$1E
   508 217F B1 E5			lda (P2),y
   509 2181 C8				iny
   510 2182 18 71 E5			add (P2),y
   511 2185 C8				iny
   512 2186 18 71 E5			add (P2),y
   513 2189 A0 3F			ldy #$3F
   514 218B 18 71 E5			add (P2),y
   515 218E 4A				lsr @
   516 218F 4A				lsr @
   517 2190 A0 00			ldy #$00
   518 2192 91 E5			sta (P2),y
   519
   520 				; optimize FAIL (0, fire.pas), line = 48
   521
   522 2194 E6 E1			inc P0
   523 2196 D0 02			sne
   524 2198 E6 E2			inc P0+1
   525 219A E6 E3			inc P1
   526 219C D0 02			sne
   527 219E E6 E4			inc P1+1
   528 21A0 E6 E5			inc P2
   529 21A2 D0 02			sne
   530 21A4 E6 E6			inc P2+1
   531
   532 				; --- ForToDoEpilog
   533 21A6 A5 E0			lda B0I
   534 21A8 D0 A3			jne l_00DB
   535 21AA			l_00E9
   536
   537 				; optimize OK (fire.pas), line = 52
   538
   539 21AA A9 E0 85 E1			mva #$E0 P0
   540 21AE A9 66 85 E2			mva #$66 P0+1
   541
   542 				; optimize OK (fire.pas), line = 53
   543
   544 21B2 A9 1F 85 E0			mva #$1F B0I
   545
   546 21B6			l_0167
   547 				; --- ForToDoCondition
   548 21B6 AD 0A D2			lda SYSTEM.RND
   549 21B9 29 0F			and #$0F
   550 21BB A4 E0			ldy B0I
   551 21BD 91 E1			sta (P0),y
   552
   553 				; --- ForToDoEpilog
   554 21BF C6 E0			dec B0I
   555 21C1 10 F3			jpl l_0167
   556 21C3			l_0175
   557 21C3			l_00C5
   558
   559 				; optimize OK (fire.pas), line = 38
   560
   561 21C3 4C 2E 21			jmp l_00C6
   562
   563 				; ------------------------------------------------------------
   564
   565 = 6400			SCREEN	= $6400
   566 = 6000			CHARSET	= $6000
   567 = 2000			adr.DL	= CODEORIGIN+$0000
   568 21C6			.var DL	= adr.DL .word
   569 = 00E0			B0I	= $E0
   570 = 00E1			P0	= $E1
   571 = 00E3			P1	= $E3
   572 = 00E5			P2	= $E5
   573 = 21E9			B1I	= DATAORIGIN+$000B
   574 = 21EA			TMP	= DATAORIGIN+$000C
   575 = 000F			@FORTMP_0082	= $0F
   576 = 0007			@FORTMP_0099	= $07
   577 = 0000			@FORTMP_00D8	= $00
   578 = 0000			@FORTMP_0164	= $00
   579 21C6			@exit
   580
   581 21C6 A2 00		@halt	ldx #$00
   582 21C8 9A				txs
   583 					.ifdef MAIN.@DEFINES.ROMOFF
   584 					inc portb
   585 					.endif
   586
   587 21C9 A0 01			ldy #$01
   588
   589 21CB 60				rts
   590
   591 				; ------------------------------------------------------------
   592
   593 21CC 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   594
   595 				; ------------------------------------------------------------
   596
   597 21DC			.local	@DEFINES
   598 21DC			ATARI
   599 				.endl
   600
   601 21DC			.local	@RESOURCE
   602 				.endl
   603
   604 = 21DC 00 20		DL
   604 				.endl							; MAIN
   605
   606 				; ------------------------------------------------------------
   607 				; ------------------------------------------------------------
   608
   609 				.macro	UNITINITIALIZATION
   610 				
   611 					.ifdef MAIN.SYSTEM.@UnitInit
   612 					jsr MAIN.SYSTEM.@UnitInit
   613 					eif
   614 				
   615 					.ifdef MAIN.ATARI.@UnitInit
   616 					jsr MAIN.ATARI.@UnitInit
   617 					eif
   618 				.endm
   619
   620 				; ------------------------------------------------------------
   621
   622 					ift .SIZEOF(MAIN.SYSTEM) > 0
   623 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   623 				SYSTEM: $2092..$20B0
   624 					eif
   625
   626 					ift .SIZEOF(MAIN.ATARI) > 0
   627 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   628 					eif
   629
   630 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   630 				CODE: $2000..$21DB
   631
   632 				; ------------------------------------------------------------
   633
   634 21DE			DATAORIGIN
   635 21DE 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   636
   637 = 0006			VARINITSIZE	= *-DATAORIGIN
   638 = 000D			VARDATASIZE	= 13
   639
   640 = 21EB			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   641
   642 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   642 				DATA: $21DE..$21EB
   643
   644 02E0-02E1> 62 20			run START
   645
   646 				; ------------------------------------------------------------
   647
   648 				.macro	STATICDATA
   649 				.by  $42 $00 $64 $02 $02 $02 $02 $02  $02 $02 $02 $02 $02 $02 $02 $02  $02 $02 $02 $02 $02 $02 $02 $41
   650 				.by  $00 $20
   651 				.endm
   652
   653 					end
